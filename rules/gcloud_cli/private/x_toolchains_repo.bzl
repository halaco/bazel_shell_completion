"""
"""

load(
    "//python:versions.bzl",
    "PLATFORMS",
)

def toolchain_build_file_content(
        prefix,
        version,
        repository_name,
        loaded_platforms):
    """Creates the content for toolchain definitions for a build file.

    Args:
        prefix: Python toolchain name prefixes
        python_version: Python versions for the toolchains
        set_python_version_constraint: string, "True" if the toolchain should
            have the Python version constraint added as a requirement for
            matching the toolchain, "False" if not.
        user_repository_name: names for the user repos
        loaded_platforms: {type}`struct` the list of platform structs defining the
            loaded platforms. It is as they are defined in `//python:versions.bzl`.

    Returns:
        build_content: Text containing toolchain definitions
    """

    return "\n\n".join([
        """\
gcloud_toolchain_suite(
    repository_name = "{repository_name}_{platform}",
    prefix = "{prefix}{platform}",
    version = "{version}",
)""".format(
            platform = platform,
            repository_name = repository_name,
            prefix = prefix,
            version = version,
        )
        for platform, meta in loaded_platforms.items()
    ])


def _toolchains_repo_impl(rctx):
    build_content = """\
# Generated by rules/gcloud_cli/private/toolchains_repo.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains
# flag. By default all these toolchains are registered by the
# gcloud_cli_register_toolchains macro so you don't normally need to interact with
# these targets.

load("@{rules_gcloud_cli}//rules/gcloud_cli/private:gcloud_toolchain_suite.bzl", "gcloud_toolchain_suite")

""".format(
        rules_gcloud_cli = rctx.attr._rules_workspace.workspace_name,
    )

    toolchains = toolchain_build_file_content(
        prefix = "",
        version = rctx.attr.version,
        repository_name = rctx.attr.repository_name,
        loaded_platforms = {
            k: v
            for k, v in PLATFORMS.items()
            if k in rctx.attr.platforms
        },
    )

    rctx.file("BUILD.bazel", build_content + toolchains)

toolchains_repo = repository_rule(
    _toolchains_repo_impl,
    doc = "Creates a repository with toolchain definitions for all known platforms " +
          "which can be registered or selected.",
    attrs = {
        "platforms": attr.string_list(doc = "List of platforms for which the toolchain definitions shall be created"),
        "version": attr.string(doc = "The Gcloud CLI version."),
        "repository_name": attr.string(doc = "what the user chose for the base name"),
        "_rules_workspace": attr.label(default = Label("//:WORKSPACE")),
    },
)