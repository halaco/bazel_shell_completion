
"""
"""

load("//rules/gcloud_cli:versions.bzl", "CLI_PLATFORMS")


def gcloud_cli_toolchain_build_file_content(
        prefix,
        repository_name,
        loaded_platforms):
    """
    Creates the content for toolchain definitions for a build file.

    Args:
        prefix: Python toolchain name prefixes
        repository_name: names for the user repos
        loaded_platforms: {type}`struct` the list of platform structs defining the
            loaded platforms. It is as they are defined in `//python:versions.bzl`.

    Returns:
        build_content: Text containing toolchain definitions
    """

    return "\n\n".join([
        """\
gcloud_cli_toolchain_suite(
    name = "{repository_name}_{platform}",
    repository_name = "{repository_name}_{platform}",
    prefix = "{prefix}{platform}",
    target_compatible_with = {compatible_with},
)""".format(
            compatible_with = _render_indent(_render_list(meta.compatible_with)).lstrip(),
            platform = platform,
            repository_name = repository_name,
            prefix = prefix,
        )
        for platform, meta in loaded_platforms.items()
    ])


def _toolchains_repo_impl(rctx):
    build_content = """\
# Generated by rules/gcloud_cli/private/toolchains_repo.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains
# flag. By default all these toolchains are registered by the
# python_register_toolchains macro so you don't normally need to interact with
# these targets.

load("@{workspace_name}//rules/gcloud_cli/private:gcloud_cli_toolchain_suite.bzl", "gcloud_cli_toolchain_suite")

""".format(
        workspace_name = rctx.attr._rules_gcloud_cli_workspace.workspace_name,
    )

    toolchains = gcloud_cli_toolchain_build_file_content(
        prefix = "",
        repository_name = rctx.attr.repository_name,
        loaded_platforms = {
            k: v
            for k, v in CLI_PLATFORMS.items()
            if k in rctx.attr.loaded_platforms
        },
    )

    rctx.file("BUILD.bazel", build_content + toolchains)


toolchains_repo = repository_rule(
    _toolchains_repo_impl,
    doc = "Creates a repository with toolchain definitions for all known platforms " +
          "which can be registered or selected.",
    attrs = {
        "loaded_platforms": attr.string_list(),
        "version": attr.string(),
        "repository_name": attr.string(),
        "_rules_gcloud_cli_workspace": attr.label(default = Label("//:WORKSPACE")),
    },
)

def _render_indent(text, indent = " " * 4):
    if "\n" not in text:
        return indent + text

    return "\n".join([indent + line for line in text.splitlines()])


def _hanging_indent(text, indent = " " * 4):
    if "\n" not in text:
        return text

    lines = text.splitlines()
    for i, line in enumerate(lines):
        lines[i] = (indent if i != 0 else "") + line
    return "\n".join(lines)


def _render_list(items, *, hanging_indent = ""):
    """Convert a list to formatted text.

    Args:
        items: list of items.
        hanging_indent: str, indent to apply to second and following lines of
            the formatted text.

    Returns:
        The list pretty formatted as a string.
    """
    if not items:
        return "[]"

    if len(items) == 1:
        return "[{}]".format(repr(items[0]))

    text = "\n".join([
        "[",
        _render_indent("\n".join([
            "{},".format(repr(item))
            for item in items
        ])),
        "]",
    ])
    if hanging_indent:
        text = _hanging_indent(text, hanging_indent)
    return text

